import React,{useEffect,useState} from 'react'
type Step='upload'|'consent'|'processing'|'result'
type OverlayPoint={x:number;y:number;color?:string;label?:string;conf?:number}
export default function App(){
  const [step,setStep]=useState<Step>('upload')
  const [file,setFile]=useState<File|null>(null)
  const [consent,setConsent]=useState(false)
  const [jobId,setJobId]=useState<string|null>(null)
  const [processing,setProcessing]=useState(0)
  const [message,setMessage]=useState('')
  const [score,setScore]=useState(0)
  const [frameB64,setFrameB64]=useState<string|null>(null)
  const [overlay,setOverlay]=useState<OverlayPoint[]>([])
  const [metrics,setMetrics]=useState<any>(null)
  const choose:React.ChangeEventHandler<HTMLInputElement>=e=>{const f=e.target.files?.[0]; if(!f) return; if(!f.type.startsWith('video/')){alert('Upload a video');return;} setFile(f); setStep('consent')}
  async function start(){ if(!file) return; setProcessing(0); setMessage('Uploading…'); setStep('processing'); const fd=new FormData(); fd.append('video',file); fd.append('withers_cm','55'); const r=await fetch('/api/analyze',{method:'POST',body:fd}); const j=await r.json(); if(!r.ok){ setMessage(j.error||'Server error'); setProcessing(100); setStep('result');return;} setJobId(j.job_id); setMessage('Queued…') }
  useEffect(()=>{ if(step!=='processing'||!jobId) return; let t=0; const iv=setInterval(async()=>{ t+=1; setProcessing(p=>Math.min(99,p+(t<3?15:5))); const r=await fetch('/api/result/'+jobId); const j=await r.json(); if(j.status==='done'){ setProcessing(100); setScore(j.result?.score??0); setMessage(j.result?.recommendation??'Analysis complete'); setOverlay(j.result?.keypoints??[]); setFrameB64(j.result?.frame_jpeg_b64??null); setMetrics(j.result?.metrics??null); clearInterval(iv); setStep('result') } else if(j.status==='error'){ setProcessing(100); setMessage(j.error||'Error'); clearInterval(iv); setStep('result') } },1200); return ()=>clearInterval(iv)},[jobId,step])
  return (<div className="relative min-h-screen bg-gradient-to-br from-[#D5DCC3] to-[#A7B08A] text-slate-800">
    <header className="mx-auto flex w-full max-w-[1100px] items-center justify-between px-6 py-6"><h1 className="text-2xl font-semibold">Hound Forward</h1><span className="rounded-full bg-white/80 px-3 py-1 text-xs shadow">Clinical-calm & trustworthy</span></header>
    <main className="mx-auto w-full max-w-[1100px] px-6 pb-24">
      {step==='upload'&&(<section className="rounded-2xl border border-slate-200/70 bg-white/80 p-6 shadow-lg backdrop-blur"><div className="flex h-[420px] flex-col items-center justify-center rounded-2xl border-2 border-dashed border-slate-300"><p className="mb-2 text-2xl font-semibold">Upload a video</p><p className="mb-6 text-slate-600">Drag or paste a file here, or choose an option below.</p><label htmlFor="f" className="inline-flex cursor-pointer items-center gap-2 rounded-full bg-[#6C63FF] px-5 py-3 text-white shadow hover:shadow-md">Choose File</label><input id="f" type="file" accept="video/*" className="sr-only" onChange={choose}/></div></section>)}
      {step==='consent'&&(<section className="rounded-2xl border border-slate-200/70 bg-white/80 p-6 shadow-lg backdrop-blur"><label className="flex items-start gap-3"><input type="checkbox" className="mt-1 h-5 w-5 rounded border-slate-300 text-[#6C63FF]" checked={consent} onChange={e=>setConsent(e.target.checked)} /><span className="text-sm leading-6 text-slate-700">By uploading, you confirm you have permission and agree to processing.</span></label><div className="mt-4"><button disabled={!consent} onClick={start} className={`rounded-full px-6 py-3 text-white ${consent?'bg-[#6C63FF]':'bg-[#6C63FF]/50 cursor-not-allowed'}`}>Upload</button></div></section>)}
      {step==='processing'&&(<section className="rounded-2xl border border-slate-200/70 bg-white/80 p-6 shadow-lg backdrop-blur"><div className="relative h-8 w-full overflow-hidden rounded-full bg-slate-200/70"><div className="absolute inset-y-0 left-0 rounded-full bg-gradient-to-r from-emerald-500 via-lime-500 to-green-600 transition-[width]" style={{width:processing+'%'}}/><div className="absolute inset-0 flex items-center justify-center text-sm font-semibold text-white">Analysing ▶▶</div></div><p className="mt-3 text-sm text-slate-700">{message}</p></section>)}
      {step==='result'&&(<section className="rounded-2xl border border-slate-200/70 bg-white/80 p-6 shadow-lg backdrop-blur"><Hero frameB64={frameB64} overlay={overlay}/><div className="mt-6"><Meter score={score} min={0} max={5}/></div><div className="mt-4 space-y-1"><p className="text-xl font-bold">Your Dog’s Score: {Number(score).toFixed(1)}</p><p className="text-slate-800">{message}</p></div>{metrics&&<Grid metrics={metrics}/>}<p className="mt-5 text-sm text-slate-600">Informational insights only; not a diagnosis.</p><div className="mt-6"><button onClick={()=>location.reload()} className="rounded-full bg-[#6C63FF] px-6 py-3 text-white shadow">Analyze another video</button></div></section>)}
    </main><footer className="mx-auto w-full max-w-[1100px] px-6 pb-8 text-xs text-slate-700">© {new Date().getFullYear()} Hound Forward</footer></div>)}
function Hero({frameB64,overlay}:{frameB64:string|null;overlay:OverlayPoint[]}){return(<div className="relative aspect-video w-full overflow-hidden rounded-2xl border border-slate-200 bg-slate-100 shadow-inner">{frameB64?(<img src={`data:image/jpeg;base64,${frameB64}`} alt="frame" className="h-full w-full object-cover"/>):(<div className="flex h-full items-center justify-center text-slate-500">No frame</div>)}{frameB64&&overlay.map((p,i)=>(<span key={i} className="pointer-events-none absolute h-3 w-3 -translate-x-1.5 -translate-y-1.5 rounded-full ring-2 ring-white/90 shadow" style={{left:`${p.x*100}%`,top:`${p.y*100}%`,backgroundColor:p.color||'#2FB36D'}}/>))}</div>)}
function Grid({metrics}:{metrics:any}){const I=(l:string,v:string)=>(<div className="rounded-xl border border-slate-200 bg-white/80 p-3 shadow-sm"><div className="text-xs text-slate-600">{l}</div><div className="text-lg font-semibold">{v}</div></div>); return(<div className="mt-6 grid gap-3 sm:grid-cols-2 md:grid-cols-3">{'cadence_hz'in metrics&&I('Cadence (Hz)',Number(metrics.cadence_hz).toFixed(2))}{'stride_time_s'in metrics&&I('Stride time (s)',Number(metrics.stride_time_s).toFixed(2))}{metrics.symmetry_index?.left_right!==undefined&&I('LR symmetry idx',Number(metrics.symmetry_index.left_right).toFixed(1))}{metrics.symmetry_index?.top_bottom!==undefined&&I('TB symmetry idx',Number(metrics.symmetry_index.top_bottom).toFixed(1))}{'speed_px_s'in metrics&&I('Speed (px/s)',Number(metrics.speed_px_s).toFixed(1))}{'stride_length_px_est'in metrics&&I('Stride length (px)',Number(metrics.stride_length_px_est).toFixed(1))}</div>)}
function Meter({score,min,max}:{score:number;min:number;max:number}){const ticks=Array.from({length:max-min+1},(_,i)=>i+min); const clamp=(v:number)=>Math.max(0,Math.min(100,v)); const pct=clamp(((score-min)/(max-min))*100); return(<div className="w-full"><div className="relative"><svg viewBox="0 0 100 22" className="block h-14 w-full" preserveAspectRatio="none"><defs><linearGradient id="meterGrad" x1="0" x2="1" y1="0" y2="0"><stop offset="0%" stopColor="#D84E4E"/><stop offset="50%" stopColor="#E9A23B"/><stop offset="100%" stopColor="#2FB36D"/></linearGradient></defs><rect x="0" y="6" width="100" height="10" rx="5" fill="url(#meterGrad)"/>{ticks.map(t=>{const x=(t/(max-min))*100; return(<g key={t}><line x1={x} y1="4" x2={x} y2="18" stroke="white" strokeWidth="0.8" opacity="0.95"/></g>)})}<polygon points={`${pct},2 ${pct-2.8},6 ${pct+2.8},6`} fill="#ffffff"/></svg><div className="pointer-events-none absolute inset-0 flex items-center justify-center text-sm font-semibold text-white/95">Analysis complete</div></div><div className="mt-1 flex justify-between px-1 text-xs text-slate-700"><span>0</span><span>5</span></div></div>)}
